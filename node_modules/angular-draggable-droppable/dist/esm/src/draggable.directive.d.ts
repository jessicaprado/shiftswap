import { OnInit, ElementRef, Renderer, EventEmitter, OnDestroy, OnChanges, NgZone, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/observable/merge';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/takeLast';
import 'rxjs/add/operator/pairwise';
import 'rxjs/add/operator/share';
import { DraggableHelper } from './draggableHelper.provider';
export declare type Coordinates = {
    x: number;
    y: number;
};
export declare type DragAxis = {
    x: boolean;
    y: boolean;
};
export declare type SnapGrid = {
    x?: number;
    y?: number;
};
export declare type ValidateDrag = (coordinates: Coordinates) => boolean;
export declare class Draggable implements OnInit, OnChanges, OnDestroy {
    element: ElementRef;
    private renderer;
    private draggableHelper;
    private zone;
    dropData: any;
    dragAxis: DragAxis;
    dragSnapGrid: SnapGrid;
    ghostDragEnabled: boolean;
    validateDrag: ValidateDrag;
    dragStart: EventEmitter<Coordinates>;
    dragging: EventEmitter<Coordinates>;
    dragEnd: EventEmitter<Coordinates>;
    /**
     * @hidden
     */
    mouseDown: Subject<any>;
    /**
     * @hidden
     */
    mouseMove: Subject<any>;
    /**
     * @hidden
     */
    mouseUp: Subject<any>;
    private eventListenerSubscriptions;
    /**
     * @hidden
     */
    constructor(element: ElementRef, renderer: Renderer, draggableHelper: DraggableHelper, zone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private checkEventListeners();
    private onMouseDown(event);
    private onMouseUp(event);
    private onMouseEnter();
    private onMouseLeave();
    private setCssTransform(value);
    private canDrag();
    private setCursor(value);
    private unsubscribeEventListeners();
}
